{
    "version": {
        "major": "1",
        "minor": "3"
    },
    "domains": [
        {
            "domain": "Console",
            "description": "This domain is deprecated - use Runtime or Log instead.",
            "deprecated": true,
            "dependencies": [
                "Runtime"
            ],
            "types": [
                {
                    "id": "ConsoleMessage",
                    "description": "Console message.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "source",
                            "description": "Message source.",
                            "type": "string",
                            "enum": [
                                "xml",
                                "javascript",
                                "network",
                                "console-api",
                                "storage",
                                "appcache",
                                "rendering",
                                "security",
                                "other",
                                "deprecation",
                                "worker"
                            ]
                        },
                        {
                            "name": "level",
                            "description": "Message severity.",
                            "type": "string",
                            "enum": [
                                "log",
                                "warning",
                                "error",
                                "debug",
                                "info"
                            ]
                        },
                        {
                            "name": "text",
                            "description": "Message text.",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "description": "URL of the message origin.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "line",
                            "description": "Line number in the resource that generated this message (1-based).",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "column",
                            "description": "Column number in the resource that generated this message (1-based).",
                            "optional": true,
                            "type": "integer"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "clearMessages",
                    "description": "Does nothing."
                },
                {
                    "name": "disable",
                    "description": "Disables console domain, prevents further console messages from being reported to the client."
                },
                {
                    "name": "enable",
                    "description": "Enables console domain, sends the messages collected so far to the client by means of the\n`messageAdded` notification."
                }
            ],
            "events": [
                {
                    "name": "messageAdded",
                    "description": "Issued when new console message is added.",
                    "parameters": [
                        {
                            "name": "message",
                            "description": "Console message that has been added.",
                            "$ref": "ConsoleMessage"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Debugger",
            "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing\nbreakpoints, stepping through execution, exploring stack traces, etc.",
            "dependencies": [
                "Runtime"
            ],
            "types": [
                {
                    "id": "BreakpointId",
                    "description": "Breakpoint identifier.",
                    "type": "string"
                },
                {
                    "id": "CallFrameId",
                    "description": "Call frame identifier.",
                    "type": "string"
                },
                {
                    "id": "Location",
                    "description": "Location in the source code.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "description": "Script identifier as reported in the `Debugger.scriptParsed`.",
                            "$ref": "Runtime.ScriptId"
                        },
                        {
                            "name": "lineNumber",
                            "description": "Line number in the script (0-based).",
                            "type": "integer"
                        },
                        {
                            "name": "columnNumber",
                            "description": "Column number in the script (0-based).",
                            "optional": true,
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "ScriptPosition",
                    "description": "Location in the source code.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "lineNumber",
                            "type": "integer"
                        },
                        {
                            "name": "columnNumber",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "LocationRange",
                    "description": "Location range within one script.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "$ref": "Runtime.ScriptId"
                        },
                        {
                            "name": "start",
                            "$ref": "ScriptPosition"
                        },
                        {
                            "name": "end",
                            "$ref": "ScriptPosition"
                        }
                    ]
                },
                {
                    "id": "CallFrame",
                    "description": "JavaScript call frame. Array of call frames form the call stack.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "callFrameId",
                            "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused.",
                            "$ref": "CallFrameId"
                        },
                        {
                            "name": "functionName",
                            "description": "Name of the JavaScript function called on this call frame.",
                            "type": "string"
                        },
                        {
                            "name": "functionLocation",
                            "description": "Location in the source code.",
                            "optional": true,
                            "$ref": "Location"
                        },
                        {
                            "name": "location",
                            "description": "Location in the source code.",
                            "$ref": "Location"
                        },
                        {
                            "name": "url",
                            "description": "JavaScript script name or url.\nDeprecated in favor of using the `location.scriptId` to resolve the URL via a previously\nsent `Debugger.scriptParsed` event.",
                            "deprecated": true,
                            "type": "string"
                        },
                        {
                            "name": "scopeChain",
                            "description": "Scope chain for this call frame.",
                            "type": "array",
                            "items": {
                                "$ref": "Scope"
                            }
                        },
                        {
                            "name": "this",
                            "description": "`this` object for this call frame.",
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "returnValue",
                            "description": "The value being returned, if the function is at return point.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "canBeRestarted",
                            "description": "Valid only while the VM is paused and indicates whether this frame\ncan be restarted or not. Note that a `true` value here does not\nguarantee that Debugger#restartFrame with this CallFrameId will be\nsuccessful, but it is very likely.",
                            "experimental": true,
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "Scope",
                    "description": "Scope description.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "Scope type.",
                            "type": "string",
                            "enum": [
                                "global",
                                "local",
                                "with",
                                "closure",
                                "catch",
                                "block",
                                "script",
                                "eval",
                                "module",
                                "wasm-expression-stack"
                            ]
                        },
                        {
                            "name": "object",
                            "description": "Object representing the scope. For `global` and `with` scopes it represents the actual\nobject; for the rest of the scopes, it is artificial transient object enumerating scope\nvariables as its properties.",
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "startLocation",
                            "description": "Location in the source code where scope starts",
                            "optional": true,
                            "$ref": "Location"
                        },
                        {
                            "name": "endLocation",
                            "description": "Location in the source code where scope ends",
                            "optional": true,
                            "$ref": "Location"
                        }
                    ]
                },
                {
                    "id": "SearchMatch",
                    "description": "Search match for resource.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "lineNumber",
                            "description": "Line number in resource content.",
                            "type": "number"
                        },
                        {
                            "name": "lineContent",
                            "description": "Line with match content.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "BreakLocation",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "description": "Script identifier as reported in the `Debugger.scriptParsed`.",
                            "$ref": "Runtime.ScriptId"
                        },
                        {
                            "name": "lineNumber",
                            "description": "Line number in the script (0-based).",
                            "type": "integer"
                        },
                        {
                            "name": "columnNumber",
                            "description": "Column number in the script (0-based).",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "type": "string",
                            "enum": [
                                "debuggerStatement",
                                "call",
                                "return"
                            ]
                        }
                    ]
                },
                {
                    "id": "WasmDisassemblyChunk",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "lines",
                            "description": "The next chunk of disassembled lines.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "bytecodeOffsets",
                            "description": "The bytecode offsets describing the start of each line.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                },
                {
                    "id": "ScriptLanguage",
                    "description": "Enum of possible script languages.",
                    "type": "string",
                    "enum": [
                        "JavaScript",
                        "WebAssembly"
                    ]
                },
                {
                    "id": "DebugSymbols",
                    "description": "Debug symbols available for a wasm script.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "Type of the debug symbols.",
                            "type": "string",
                            "enum": [
                                "None",
                                "SourceMap",
                                "EmbeddedDWARF",
                                "ExternalDWARF"
                            ]
                        },
                        {
                            "name": "externalURL",
                            "description": "URL of the external symbol source.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "continueToLocation",
                    "description": "Continues execution until specific location is reached.",
                    "parameters": [
                        {
                            "name": "location",
                            "description": "Location to continue to.",
                            "$ref": "Location"
                        },
                        {
                            "name": "targetCallFrames",
                            "optional": true,
                            "type": "string",
                            "enum": [
                                "any",
                                "current"
                            ]
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables debugger for given page."
                },
                {
                    "name": "enable",
                    "description": "Enables debugger for the given page. Clients should not assume that the debugging has been\nenabled until the result for this command is received.",
                    "parameters": [
                        {
                            "name": "maxScriptsCacheSize",
                            "description": "The maximum size in bytes of collected scripts (not referenced by other heap objects)\nthe debugger can hold. Puts no limit if parameter is omitted.",
                            "experimental": true,
                            "optional": true,
                            "type": "number"
                        }
                    ],
                    "returns": [
                        {
                            "name": "debuggerId",
                            "description": "Unique identifier of the debugger.",
                            "experimental": true,
                            "$ref": "Runtime.UniqueDebuggerId"
                        }
                    ]
                },
                {
                    "name": "evaluateOnCallFrame",
                    "description": "Evaluates expression on a given call frame.",
                    "parameters": [
                        {
                            "name": "callFrameId",
                            "description": "Call frame identifier to evaluate on.",
                            "$ref": "CallFrameId"
                        },
                        {
                            "name": "expression",
                            "description": "Expression to evaluate.",
                            "type": "string"
                        },
                        {
                            "name": "objectGroup",
                            "description": "String object group name to put result into (allows rapid releasing resulting object handles\nusing `releaseObjectGroup`).",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "includeCommandLineAPI",
                            "description": "Specifies whether command line API should be available to the evaluated expression, defaults\nto false.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "silent",
                            "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "returnByValue",
                            "description": "Whether the result is expected to be a JSON object that should be sent by value.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "generatePreview",
                            "description": "Whether preview should be generated for the result.",
                            "experimental": true,
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "throwOnSideEffect",
                            "description": "Whether to throw an exception if side effect cannot be ruled out during evaluation.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "timeout",
                            "description": "Terminate execution after timing out (number of milliseconds).",
                            "experimental": true,
                            "optional": true,
                            "$ref": "Runtime.TimeDelta"
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "description": "Object wrapper for the evaluation result.",
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "exceptionDetails",
                            "description": "Exception details.",
                            "optional": true,
                            "$ref": "Runtime.ExceptionDetails"
                        }
                    ]
                },
                {
                    "name": "getPossibleBreakpoints",
                    "description": "Returns possible locations for breakpoint. scriptId in start and end range locations should be\nthe same.",
                    "parameters": [
                        {
                            "name": "start",
                            "description": "Start of range to search possible breakpoint locations in.",
                            "$ref": "Location"
                        },
                        {
                            "name": "end",
                            "description": "End of range to search possible breakpoint locations in (excluding). When not specified, end\nof scripts is used as end of range.",
                            "optional": true,
                            "$ref": "Location"
                        },
                        {
                            "name": "restrictToFunction",
                            "description": "Only consider locations which are in the same (non-nested) function as start.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "locations",
                            "description": "List of the possible breakpoint locations.",
                            "type": "array",
                            "items": {
                                "$ref": "BreakLocation"
                            }
                        }
                    ]
                },
                {
                    "name": "getScriptSource",
                    "description": "Returns source for the script with given id.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Id of the script to get source for.",
                            "$ref": "Runtime.ScriptId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "scriptSource",
                            "description": "Script source (empty in case of Wasm bytecode).",
                            "type": "string"
                        },
                        {
                            "name": "bytecode",
                            "description": "Wasm bytecode. (Encoded as a base64 string when passed over JSON)",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "disassembleWasmModule",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Id of the script to disassemble",
                            "$ref": "Runtime.ScriptId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "streamId",
                            "description": "For large modules, return a stream from which additional chunks of\ndisassembly can be read successively.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "totalNumberOfLines",
                            "description": "The total number of lines in the disassembly text.",
                            "type": "integer"
                        },
                        {
                            "name": "functionBodyOffsets",
                            "description": "The offsets of all function bodies, in the format [start1, end1,\nstart2, end2, ...] where all ends are exclusive.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "chunk",
                            "description": "The first chunk of disassembly.",
                            "$ref": "WasmDisassemblyChunk"
                        }
                    ]
                },
                {
                    "name": "nextWasmDisassemblyChunk",
                    "description": "Disassemble the next chunk of lines for the module corresponding to the\nstream. If disassembly is complete, this API will invalidate the streamId\nand return an empt